import speech_recognition as sr
import webbrowser
import pyttsx3
import musicLibrary
import requests
from dotenv import load_dotenv
import os

load_dotenv()

recognizer = sr.Recognizer()
engine = pyttsx3.init()

# ðŸ”’ API Keys hidden via .env
newsapi = os.getenv("NEWSAPI_KEY")
API_KEY = os.getenv("DEEPINFRA_API_KEY")

def speak(text):
    engine.say(text)
    engine.runAndWait()

def aiprocess(command):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    url = "https://api.deepinfra.com/v1/inference/deepseek-ai/DeepSeek-R1-Turbo"
    data = {
        "input": command,
        "parameters": {
            "max_new_tokens": 100
        }
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        print(result)
        if "results" in result:
            return result['results'][0]['generated_text']
        elif "generated_text" in result:
            return result['generated_text']
        else:
            return "AI didn't return any valid response."
    except Exception as e:
        print("AI Error:", e)
        return "Sorry, I couldn't process that."

def processCommand(c):
    c = c.lower()

    if "open google" in c:
        webbrowser.open("https://www.google.co.in/")
        speak("Opening Google")

    elif "open x" in c:
        webbrowser.open("https://x.com/home?lang=en")
        speak("Opening X")

    elif "open reddit" in c:
        webbrowser.open("https://www.reddit.com/")
        speak("Opening Reddit")

    elif "open youtube" in c:
        webbrowser.open("https://www.youtube.com/")
        speak("Opening YouTube")

    elif "open spotify" in c:
        webbrowser.open("https://open.spotify.com/collection/tracks")
        speak("Opening Spotify")

    elif any(c.startswith(word) for word in ["pay", "play", "playing", "paying", "opening"]):
        for word in ["pay", "play", "playing", "paying", "opening"]:
            if c.startswith(word):
                song = c.replace(word, "").strip()
                break
        if song in musicLibrary.music:
            link = musicLibrary.music[song]
            webbrowser.open(link)
            speak(f"Playing {song}")
        else:
            speak("Sorry, I couldn't find that song.")

    elif "news" in c:
        try:
            r = requests.get(f"https://newsapi.org/v2/top-headlines?country=us&apiKey={newsapi}")
            if r.status_code == 200:
                data = r.json()
                articles = data.get('articles', [])
                if not articles:
                    speak("No news articles found.")
                for article in articles[:5]:
                    speak(article['title'])
            else:
                speak("Sorry, I couldn't fetch the news right now.")
        except Exception as e:
            print("News Error:", e)
            speak("Something went wrong while getting the news.")

    else:
        response = aiprocess(c)
        speak(response)

if __name__ == "__main__":
    speak("Initializing Jarvis....")
    while True:
        try:
            with sr.Microphone() as source:
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                print("Say 'Jarvis' to wake me up...")
                audio = recognizer.listen(source, timeout=4, phrase_time_limit=3)

            word = recognizer.recognize_google(audio)
            print("Heard:", word)

            if "jarvis" in word.lower():
                speak("Yes, I'm listening.")
                print("Jarvis Activated...")

                with sr.Microphone() as source:
                    recognizer.adjust_for_ambient_noise(source, duration=0.5)
                    audio = recognizer.listen(source, timeout=4, phrase_time_limit=5)
                    command = recognizer.recognize_google(audio)
                    print("Command:", command)
                    processCommand(command)

        except sr.UnknownValueError:
            print("Didn't catch that.")
        except Exception as e:
            print("Error:", e)
